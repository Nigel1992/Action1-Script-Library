<#
.SYNOPSIS
    This script downloads and runs the PatchMyPC HomeUpdater tool to update installed applications silently,
    then reads its log file to report which updates succeeded or failed.

.DESCRIPTION
    1. Downloads the PatchMyPC HomeUpdater portable executable to the TEMP folder.
    2. Removes any existing log file to ensure only fresh update results are analyzed.
    3. Runs the updater silently (no user interaction).
    4. Waits briefly to ensure the log file is complete.
    5. Reads the log file and filters for update success and failure messages.
    6. Displays those results with clear success/fail tags.
    7. Outputs a summary that can be captured by monitoring tools (like Action1).

.NOTES
    - Requires internet access to download the tool.
    - Must be run with appropriate permissions to execute updates.
    - Log file location and update messages may vary by version.

#>

# Stop the PatchMyPC HomeUpdater process if it's running before running the script to avoid conflicts
Stop-Process -Name "PatchMyPC-HomeUpdater-Portable" -Force -ErrorAction SilentlyContinue

# ==============================
# Define key file paths and URLs
# ==============================
$downloadUrl = "https://homeupdater.patchmypc.com/public/PatchMyPC-HomeUpdater-Portable.exe"
$filePath = "$env:TEMP\PatchMyPC-HomeUpdater-Portable.exe"            # Where the updater executable will be saved
$logFile = "C:\ProgramData\PatchMyPC\PatchMyPCHomeUpdater.log"              # Location of the update log file generated by the updater

# ===================
# Download the updater
# ===================
Write-Output "üì• Downloading PatchMyPC HomeUpdater..."
Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath -UseBasicParsing

# Verify the download succeeded
if (-Not (Test-Path $filePath)) {
    Write-Error "‚ùå Download failed. Cannot proceed without updater."
    exit 1
}

# =================================
# Clean up old log to get fresh data
# =================================
if (Test-Path $logFile) {
    Write-Output "üßπ Removing existing log file to start fresh."
    Remove-Item $logFile -Force
}

# ============================
# Run updater silently (quiet)
# ============================
Write-Output "üöÄ Running HomeUpdater to update all applications silently..."
Start-Process -FilePath $filePath -ArgumentList "/s" -Wait

# ======================
# Wait for log file output
# ======================
Start-Sleep -Seconds 5   # Give the updater time to write the log file fully

# ===========================
# Check if log file was created
# ===========================
if (-Not (Test-Path $logFile)) {
    Write-Warning "‚ö†Ô∏è Log file not found. Cannot display update status."
    exit 0
}

# =============================
# Read and parse update results
# =============================
Write-Output "`nüìÑ Update results from the log file:"
$logLines = Get-Content $logFile | Select-String -Pattern "Update succeeded", "Update failed"

# Prepare output summary for display or tool capture
$output = @()

if ($logLines) {
    foreach ($line in $logLines) {
        if ($line.Line -match "Update succeeded") {
            $formatted = "[‚úÖ SUCCESS] $($line.Line)"
            Write-Host $formatted -ForegroundColor Green
            $output += $formatted
        }
        elseif ($line.Line -match "Update failed") {
            $formatted = "[‚ùå FAIL]    $($line.Line)"
            Write-Host $formatted -ForegroundColor Red
            $output += $formatted
        }
    }
}
else {
    $output += "‚ÑπÔ∏è No update results found in the log file."
}

# Output final summary (can be captured by Action1 or other monitoring systems)
$output -join "`n"
